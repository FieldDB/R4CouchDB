.packageName <- "R4CouchDB"
cdbAddDoc <- function( cdb){

  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if(cdb$DBName ==""){
    cdb$error <- paste(cdb$error, " no cdb$DBName given ", sep=" ")
  }

  if( (length(cdb$dataList) < 1)){
    cdb$error <- paste(cdb$error, " no cdb$dataList given ", sep=" ")
  }

  if(cdb$id == ""){

    cdb$queryParam <- "count=1"
    cdb <- cdbGetUuids(cdb)

  }

  if( cdb$error =="" ){

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$DBName,"/",
                       cdb$id,
                       sep="")

    data <- toJSON(cdb$dataList)

    res <- getURL(adrString,
                  customrequest = "PUT",
                  curl=cdb$curl,
                  postfields = data
                  )

    cdb$res <- fromJSON( res )

    return( cdb )

  }else{

    stop( cdb$error )

  }
}
cdbDeleteDoc <- function( cdb ){

  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if(cdb$DBName ==""){
    cdb$error <- paste(cdb$error, " no cdb$DBName given ")
  }

  if(cdb$id ==""){
    cdb$error <- paste(cdb$error, " no cdb$id given ")
  }

  if(cdb$error == ""){

    ## it's important to say which
    ## revision should be deleted
    ## brutforce at the moment

    cdb <- cdbGetDoc(cdb)
    cdb$rev <- cdb$res$'_rev'

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$DBName,"/",
                       cdb$id,
                       "?rev=",
                       cdb$rev,
                       sep="")

    res <- getURL(adrString,
                  customrequest = "DELETE",
                  curl=cdb$curl
                  )

    cdb$res <- fromJSON(res)

    return( cdb )

  }else{

    stop( cdb$error )
  }
}
cdbGetDoc <- function( cdb){

  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if( cdb$id == ""){
    cdb$error <- paste( cdb$error, " no cdb$id given ")
  }

  if(cdb$error == ""){

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$DBName,"/",
                       cdb$id,
                       sep="")


    res <- getURL(adrString,
                  customrequest = "GET",
                  curl=cdb$curl
                  )

    cdb$res <- fromJSON(res)

    return( cdb )

  }else{

    stop( cdb$error )
  }
}
cdbGetUuids <- function(cdb){
  ## write test functions!

  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if (cdb$error ==""){

    if(cdb$queryParam == ""){
      queryString <- ""
    }else{
      queryString <- paste("?",cdb$queryParam, sep="")
    }

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port, "/_uuids",
                       queryString,
                       sep="")


    res <- getURL(adrString,
                  customrequest = "GET",
                  curl=cdb$curl
                  )

    cdb$id <- fromJSON(res)$uuids

    return( cdb )
  }else{
    stop( cdb$error )
  }
}
cdbGetView <- function( cdb ){

  if(cdb$design == "") {
    cdb$error <- paste(cdb$error, "no cdb$design given"
                       , sep=" ")
  }

  if(cdb$view == "") {
    cdb$error <- paste(cdb$error,
                       "no cdb$design given", sep=" ")
  }

  if(cdb$error ==""){

    if(cdb$queryParam == ""){
      queryString <- ""
    }else{
      queryString <- paste("?",cdb$queryParam, sep="")
    }

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$DBName,
                       "/_design/",
                       cdb$design,
                       "/_view/",
                       cdb$view,
                       queryString,
                       sep="")

    res <- getURL(adrString,
                  curl=cdb$curl
                  )

    cdb$res <- fromJSON( res )

    return( cdb )

  }else{

    stop( cdb$error )
  }
}
cdbIni <- function(){
  ## http://www.omegahat.org/RJSONIO/
  ## thanx to Duncan Temple Lang
  rc <- library(RCurl, logical.return = TRUE)
  rj <- library(RJSONIO, logical.return = TRUE)

  if(rc && rj){

    cdb <- list(
                serverName = "localhost",
                port = "5984",
                curl=getCurlHandle(),
                DBName="",
                newDBName="",
                removeDBName="",
                id="",
                rev="",
                dataList=list(),
                design="",
                view="",
                queryParam="",
                date=toString(Sys.Date()),
                error="",
                res=""
                )
      return( cdb )
    }else{

    eTxt <- paste("RCurl loaded: ",rc,"\n",
                  "RJSONIO loaded: ",rj)

    cdb$error <- eTxt
    return( cdb )

    ## libs can be loaded online ...
    ## ... later
  }
}
cdbListDB <- function(cdb){

 if(cdb$serverName == ""){
   cdb$error <- paste(cdb$error," no cdb$serverName given")
 }

 if(cdb$error == ""){

   adrString <- paste("http://",
                      cdb$serverName,":",
                      cdb$port, "/_all_dbs",
                      sep="")

   res <- getURL(adrString,
                 customrequest = "GET",
                 curl=cdb$curl
                 )

   cdb$res <- fromJSON(res)

   return( cdb )

 }else{

    stop( cdb$error )
  }
}
cdbMakeDB <- function(cdb){

  ## write test functions!
  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if(cdb$newDBName == ""){

    cdb$error <- paste(cdb$error," no cdb$newDBName given ")

  }else{

    DBNames <- cdbListDB(cdb)$res
    DBexists <- which(DBNames == cdb$newDBName)

    if(length(DBexists) > 0){

      cdb$error <- paste(cdb$error," cdb$newDBName already exists ")

    }
  }

  if(cdb$error == ""){

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$newDBName,
                       sep="")


    res <- getURL(adrString,
                  customrequest = "PUT",
                  curl=cdb$curl
                  )

    cdb$res <- fromJSON( res )

    ## newDB is generated it's now no longer a new one
    cdb$DBName <- cdb$newDBName
    return( cdb )

  }else{
    stop( cdb$error )
  }
}

cdbRemoveDB <- function(cdb){

  if(cdb$serverName == ""){
    cdb$error <- paste(cdb$error," no cdb$serverName given")
  }

  if(cdb$removeDBName == ""){
    cdb$error <- paste(cdb$error, "no cdb$removeDBName given")
  }else{

    DBNames <- cdbListDB(cdb)$res
    DBexists <- which(DBNames == cdb$removeDBName)

    if(length(DBexists) == 0){

      cdb$error <- paste(cdb$error,
                         " there is no DB called >",
                         cdb$removeDBName, "< on >",
                         cdb$serverName ,"<")
    }
  }

  if( cdb$error == ""){

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$removeDBName,
                       sep="")

    res <- getURL(adrString,
                  curl=cdb$curl,
                  customrequest = "DELETE"
                  )

    cdb$res <- fromJSON(res)

    ## the DB should be history
    cdb$removeDBName <- ""
    return( cdb )

  }else{

      stop( cdb$error )
    }
}
cdbUpdateDoc <- function( cdb){

  if( cdb$id == ""){
    cdb$error <- paste(cdb$error,
                       " no cdb$id given ",
                       sep=" ")
  }

  if( cdb$serverName == ""){
    cdb$error <- paste(cdb$error,
                       " no cdb$serverName given ",
                       sep=" ")
  }

  if(length(cdb$dataList) < 1){
    cdb$error <- paste(cdb$error,
                       " no cdb$dataList given",
                       sep=" ")
  }

  if( cdb$error ==""){

    cdb <- cdbGetDoc(cdb)
    cdb$rev <- cdb$res$'_rev'

    data <- toJSON(list('_id'=cdb$id,
                        '_rev'=cdb$rev,
                        cdb$dataList)
                   )

    adrString <- paste("http://",
                       cdb$serverName,":",
                       cdb$port,"/",
                       cdb$DBName,"/",
                       cdb$id,
                       sep="")

    res <- getURL(customrequest = "PUT",
                  curl=cdb$curl,
                  url = adrString,
                       postfields = data
                  )

    cdb$res <- fromJSON( res )
    ## update revision
    cdb <- cdbGetDoc(cdb)
    cdb$rev <- cdb$res$'_rev'

    return( cdb )

  }else{

    stop( cdb$error )
  }
}
